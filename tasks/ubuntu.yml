---

# for now fail if it's not an Ubuntu based system
- name: Check OS (lxd)
  fail: msg="Not an Ubuntu based system!"
  when: ansible_distribution != 'Ubuntu'


- name: check if /etc/network/interfaces is used (1)
  stat: path=/etc/network/interfaces
  register: network_interfaces_used


- name: check if /etc/network/interfaces is used (2)
  fail: msg="/etc/network/interfaces is not used"
  when: network_interfaces_used.stat.exists != True


#- name: check if /etc/netplan/ is used (1)
#  stat: path=/etc/netplan
#  register: netplan_used


#- name: check if /etc/netplan/ is used (2)
#  fail: msg="/etc/netplan/ is used"
#  when: netplan_used.stat.exists == True


- name: check if networkd-dispatcher is used (1)
  stat: path=/usr/lib/networkd-dispatcher/
  register: networkd_dispatcher_used


# basically the question is where to place the masquerade iptables command
- name: Reset variables
  set_fact:
    iptables_use_network_interfaces: false
    iptables_use_networkd_dispatcher: false


- block:
  - name: Use networkd-dispatcher
    set_fact:
      iptables_use_networkd_dispatcher: true

  when: networkd_dispatcher_used.stat.exists == True and iptables_use_network_interfaces == False and iptables_use_networkd_dispatcher == False


- block:
  - name: Use /etc/network/interfaces
    set_fact:
      iptables_use_network_interfaces: true
    # only use the /etc/network/interfaces when the size is bigger than just holding the "lo" interface
    when: network_interfaces_used.stat.size > 150

  when: network_interfaces_used.stat.exists == True and iptables_use_network_interfaces == False and iptables_use_networkd_dispatcher == False


- name: Check if any interface method is used
  fail:
    msg: "Could not determine interface method"
  when: iptables_use_network_interfaces == False and iptables_use_networkd_dispatcher == False


- name: Determine network interface name
  set_fact:
    main_interface: "{{ item }}"
  with_items:
    - "{{ hostvars[inventory_hostname]['ansible_interfaces'] }}"
  when: item is match("^e[tn]")
  changed_when: false


- name: inventory_hostname
  debug: msg="{{ inventory_hostname }}"

- name: IP-Address
  debug: msg="{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"


# install packages required for LXD
- name: lxd packages
  apt: name={{ item }} state=present
  with_items:
    - lxd
    - lxd-client
    - lxd-tools
  notify:
    - restart system
    - waiting for server to come back after restart


# figure out if LXD was configured before
# if yes, there should be a line with "bridged" in the output
- name: lxd configured?
  shell: lxc profile show default
  register: lxd_init
  changed_when: False


# LXD was not configured before
# fake terminal input and run the init
- name: lxd init
  shell: echo -e "dir\nno\nyes\nyes\nlxdbr0\nauto\nnone\n" | lxd init
  when: lxd_init.stdout.find("bridged") == -1


# find out the IP address for the LXD interface
- name: lxdbr0 IP address
  shell: ip addr show lxdbr0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1
  register: lxdbr0_ip_address
  changed_when: false


# fetch content of /etc/resolv.conf
- name: /etc/resolv.conf content
  shell: cat /etc/resolv.conf
  register: resolv_conf
  changed_when: false


# if 'search lxd' is not present, remove all old nameserver lines for the lxdbr0 interface
- name: /etc/resolv.conf update 1
  lineinfile:
    dest: /etc/resolv.conf
    regexp: '^nameserver 10\.'
    state: absent
  when: resolv_conf.stdout.find('search lxd') == -1


# if 'search lxd' is not present, remove all old nameserver lines for the lxdbr0 interface
- name: /etc/resolv.conf update 2
  lineinfile:
    dest: /etc/resolv.conf
    regexp: '^nameserver 192\.'
    state: absent
  when: resolv_conf.stdout.find('search lxd') == -1


# if 'search lxd' is not present, add lxdbr0 ip address as new nameserver
- name: /etc/resolv.conf update 3
  lineinfile:
    dest: /etc/resolv.conf
    line: "nameserver {{ lxdbr0_ip_address.stdout }}"
    insertafter: "# nameserver config"
    state: present
  when: resolv_conf.stdout.find('search lxd') == -1


# finally add search for the lxd domain
- name: /etc/resolv.conf update 4
  lineinfile:
    dest: /etc/resolv.conf
    line: "search lxd"
    state: present
  when: resolv_conf.stdout.find('search lxd') == -1


#- fail: msg="Stop here"


- block:
  - name: Update /etc/network/interfaces
    blockinfile:
      dest: /etc/network/interfaces
      insertafter: iface e[tn][a-z0-9]+ inet static
      content: |
        post-up /sbin/iptables --table nat -A POSTROUTING --source 10.0.0.0/8 -j MASQUERADE
        pre-down /sbin/iptables --table nat -D POSTROUTING --source 10.0.0.0/8 -j MASQUERADE
    register: network_interfaces


  - name: Start masquerading for network interface
    shell: /sbin/iptables --table nat -D POSTROUTING --source 10.0.0.0/8 -j MASQUERADE ; /sbin/iptables --table nat -A POSTROUTING --source 10.0.0.0/8 -j MASQUERADE
    when: network_interfaces.changed

  when: iptables_use_network_interfaces == True


- block:
  - name: if-up
    copy:
      src: '{{ role_path }}/files/if-up'
      dest: /usr/lib/networkd-dispatcher/routable.d/masquerade-lxdbr0
      owner: root
      group: root
      mode: 0755
    register: networkd_dispatcher_1


  - name: if-down
    copy:
      src: '{{ role_path }}/files/if-down'
      dest: /usr/lib/networkd-dispatcher/off.d/masquerade-lxdbr0
      owner: root
      group: root
      mode: 0755
    register: networkd_dispatcher_2


  - name: Start masquerading for network interface
    shell: /sbin/iptables --table nat -D POSTROUTING --source 10.0.0.0/8 -j MASQUERADE ; /sbin/iptables --table nat -A POSTROUTING --source 10.0.0.0/8 -j MASQUERADE
    when: networkd_dispatcher_1.changed or networkd_dispatcher_2.changed

  when: iptables_use_networkd_dispatcher == True


# figure out the LXC version
- name: LXC version
  shell: lxc --version
  register: lxc_version
  changed_when: false


- block:
  # starting with LXC version 2.9 a concept of "storage pools" was introduced
  # in version 3.0 the storage pool is pre-crated, but uses 'btrfs' instead of 'dir'
  - name: Check if container storage pool is created
    shell: lxc storage list
    register: lxc_storage_list
    changed_when: false

  - block:
    - name: Create container storage pool
      shell: lxc storage create container-pool dir


    - name: Remove default storage pool
      shell: lxc profile device remove default root
      when: lxc_version.stdout is version_compare('3.0.0', operator='>=', strict=False)


    - name: Attach container storage pool to default profile
      shell: lxc profile device add default root disk path=/ pool=container-pool

    when: lxc_storage_list.stdout.find('container-pool') == -1

  when: lxc_version.stdout is version_compare('2.9.0', operator='>=', strict=False)



- meta: flush_handlers
